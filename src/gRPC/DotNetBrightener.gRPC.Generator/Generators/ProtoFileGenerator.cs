using DotNetBrightener.gRPC.Generator.SyntaxReceivers;
using Microsoft.CodeAnalysis;
using System;
using System.IO;
using System.Linq;

namespace DotNetBrightener.gRPC.Generator.Generators;

[Generator]
public class ProtoFileGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new AutoGenerateProtoFileReceiver());
    }

    /// <summary>
    /// And consume the receiver here.
    /// </summary>
    public void Execute(GeneratorExecutionContext context)
    {
        var models = (context.SyntaxContextReceiver as AutoGenerateProtoFileReceiver).Models;

        if (!models.Any())
            return;

        var controllerAssemblyPath = models.First().GrpcAssemblyPath;

        var programCsFile = Path.Combine(controllerAssemblyPath, "Program.cs");

        if (File.Exists(programCsFile))
        {
            InjectProtobufConfigs(programCsFile);
        }
        else
        {
            var startupCsFile = Path.Combine(controllerAssemblyPath, "Startup.cs");

            if (File.Exists(startupCsFile))
            {
                InjectProtobufConfigs(startupCsFile);
            }
        }


        foreach (var modelClass in models)
        {
            GenerateProtoFile(modelClass);
            GenerateServiceFile(modelClass);
        }
    }

    private void InjectProtobufConfigs(string inputFile)
    {
        var fileContent = File.ReadAllText(inputFile);

        var grpcKeyStartSection = "#region gRPC service registration";
        var grpcKeyEndSection   = "#endregion gRPC service registration";

        if (!fileContent.Contains(grpcKeyStartSection))
        {
            fileContent = fileContent.Replace("app.MapGrpcService",
                                              grpcKeyStartSection + Environment.NewLine +
                                              Environment.NewLine +
                                              Environment.NewLine +
                                              grpcKeyEndSection +
                                              Environment.NewLine +
                                              Environment.NewLine +
                                              "app.MapGrpcService");

        }

        File.WriteAllText(inputFile, fileContent);
    }

    private static void GenerateServiceFile(CodeGenerationInfo modelClass)
    {
        var className = $"{modelClass.TargetEntity}";

        var targetFolder = modelClass.ServiceFilePath;

        if (!Directory.Exists(targetFolder))
        {
            Directory.CreateDirectory(targetFolder);
        }

        var defaultPathFile = Path.Combine(targetFolder, $"{className}.cs");

        if (File.Exists(defaultPathFile))
            return;

        var defaultProtoFileContent = $@"
using Grpc.Core;

namespace CRUD_With_gRPC.Services;

public class {className}Service : {modelClass.GrpcNamespace}.{className}.{className}Base
{{
    public override Task<{className}ListResponse> Get{className}List({className}ListRequest request, ServerCallContext context)
    {{
        // Implement your logic here
        return base.Get{className}List(request, context);
    }}
}}
";
        File.WriteAllText(defaultPathFile, defaultProtoFileContent);

    }
    private static void GenerateProtoFile(CodeGenerationInfo modelClass)
    {
        var className = $"{modelClass.TargetEntity}";

        var targetFolder = modelClass.ProtoFilePath;

        if (!Directory.Exists(targetFolder))
        {
            Directory.CreateDirectory(targetFolder);
        }

        var defaultPathFile = Path.Combine(targetFolder, $"{className}.proto");

        var defaultProtoFileContent = $@"
// <auto-generated>
//     Generated by the protocol buffer generator.  DO NOT EDIT!
// </auto-generated>

syntax = ""proto3"";

option csharp_namespace = ""{modelClass.GrpcNamespace}"";

package {modelClass.GrpcPackageName};


service {className} {{
    rpc Get{className} ({className}Request) returns ({className}Response) {{ }}
    rpc Get{className}List ({className}ListRequest) returns ({className}ListResponse) {{ }}
    rpc Create{className} ({className}CreateRequest) returns ({className}CreateResponse) {{ }}
    rpc Update{className} ({className}UpdateRequest) returns ({className}UpdateResponse) {{ }}
    rpc Delete{className} ({className}DeleteRequest) returns ({className}DeleteResponse) {{ }}
}}

message {className}Request {{
    int64 Id = 1;
}}

message {className}Response {{
    int64 Id = 1;
}}

message {className}ListRequest {{
    int32 page_index = 1;
    int32 page_size = 2;
    string order_by = 3;
    repeated string columns = 4;
    repeated string filters = 5;
}}

message {className}ListResponse {{
    repeated {className}Response {className} = 1;
    int64 total_records = 2;
}}

message {className}CreateRequest {{
    string Name = 1;
}}

message {className}CreateResponse {{
    int64 Id = 1;
}}

message {className}UpdateRequest {{
    int64 Id = 1;
    string Name = 2;
}}

message {className}UpdateResponse {{
    int64 Id = 1;
}}

message {className}DeleteRequest {{
    int64 Id = 1;
}}

message {className}DeleteResponse {{
    int64 Id = 1;
}}
";
        File.WriteAllText(defaultPathFile, defaultProtoFileContent);

        var csprojFile = Directory.GetFiles(modelClass.GrpcAssemblyPath, "*.csproj").First();

        var csprojFileContent = File.ReadAllText(csprojFile);

        // look for the last GRPC service in the file
        var grpcServerKeyword = " GrpcServices=\"Server\" />";
        var lastGrpcPosition =
            csprojFileContent.LastIndexOf(grpcServerKeyword, StringComparison.OrdinalIgnoreCase) +
            grpcServerKeyword.Length;
        var insertNewGrpcProto = $"{Environment.NewLine}" +
                                 $"\t\t<Protobuf Include=\"Protos\\{className}.proto\" GrpcServices=\"Server\" />";

        if (!csprojFileContent
               .Contains($"<Protobuf Include=\"Protos\\{className}.proto\" GrpcServices=\"Server\" />"))
        {
            csprojFileContent = csprojFileContent.Insert(lastGrpcPosition, insertNewGrpcProto);
            File.WriteAllText(csprojFile, csprojFileContent);
        }
    }

}